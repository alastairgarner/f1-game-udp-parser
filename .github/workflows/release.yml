
name: Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  upversion:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
      - name: version and publish
        run: |
          git config user.name $GITHUB_ACTOR
          git config user.email gh-actions-${GITHUB_ACTOR}@github.com
          git remote add gh-origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npm version --no-git-tag-version --allow-same-version ${{ steps.get_version.outputs.VERSION }}
          git add package.json package-lock.json
          git commit -m "${{ steps.get_version.outputs.VERSION }}"
          git push gh-origin HEAD:master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Copy release URL into file
        run: |
          mkdir release
          printf "%s" "${{ steps.create_release.outputs.upload_url }}" > release/url.txt

      - name: Stash file containing the release URL as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-url
          path: ./release

  build_and_upload:
    runs-on: ${{ matrix.os }}
    needs: [upversion, create_release]

    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-18.04]
        node: [ '12', '13' ]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js and NPM
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: npm install
        run: |
          npm install

      - name: Build and Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          npm run package

      - name: Retrieve stashed release URL
        uses: actions/download-artifact@v1
        with:
          name: release-url

      - name: Read release URL
        id: get_release_url
        run: echo "::set-output name=URL::$(cat release-url/url.txt)"

      - name: Get environment variables
        id: environment
        uses: msansoni/node-environment-action@v1

      - name: Get node module version
        id: node_module_version
        run: echo "::set-output name=v::$(node -e 'version=process.versions.modules; console.log(version)')"

      - name: Get package version
        id: package_version
        uses: tyankatsu0105/read-package-version-actions@v1

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.URL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ format('./build/stage/v{0}/node-v{1}-{2}-{3}.tar.gz', steps.package_version.outputs.version, steps.node_module_version.outputs.v, steps.environment.outputs.platform, steps.environment.outputs.arch) }}
          asset_name: ${{ format('node-v{0}-{1}-{2}.tar.gz', steps.node_module_version.outputs.v, steps.environment.outputs.platform, steps.environment.outputs.arch) }}
          asset_content_type: application/gzip

  publish:
    runs-on: ubuntu-latest
    needs: [build_and_upload]

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
      - uses: actions/checkout@v2
      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install
      - run: npm version --no-git-tag-version --allow-same-version ${{ steps.get_version.outputs.VERSION }}
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: actions/setup-node@v1
        with:
          registry-url: 'https://npm.pkg.github.com'
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
